{{- $routeHost := (include "keycloak-stack.routeHost" .) | trim }}
{{- $bootstrap := .Values.keycloak.bootstrapAdmin -}}
{{- $bootstrapSecretName := (include "keycloak-stack.bootstrapAdminSecretName" .) | trim }}
{{- $ldapCfg := .Values.keycloak.ldap -}}
{{- $ldapTls := $ldapCfg.tls | default dict -}}
{{- $ldapTlsEnabled := and $ldapCfg.tls $ldapCfg.tls.enabled -}}
{{- $ldapTlsFile := default "ldap-truststore.p12" $ldapTls.truststoreFile -}}
{{- $ldapTlsPassword := default "changeit" $ldapTls.truststorePassword -}}
{{- $ldapTlsSecret := default (printf "%s-openldap-tls" (include "keycloak-stack.fullname" .)) $ldapTls.caSecret -}}
{{- $ldapTlsCaKey := default "ca.crt" $ldapTls.caBundleKey -}}
{{- $ldapTlsHostnamePolicy := default "ANY" $ldapTls.hostnameVerificationPolicy -}}
{{- $pgSecretName := .Values.postgresql.auth.existingSecret | default (printf "%s-postgresql" .Release.Name) -}}
{{- if not $bootstrapSecretName -}}
  {{- fail "Set keycloak.bootstrapAdmin.secretName or enable keycloak.bootstrapAdmin.createSecret before deployment" -}}
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "keycloak-stack.fullname" . }}
  labels:
    {{- include "keycloak-stack.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.keycloak.replicaCount }}
  selector:
    matchLabels:
      {{- include "keycloak-stack.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "keycloak-stack.selectorLabels" . | nindent 8 }}
    spec:
      {{- $hasBootstrapSecret := ne $bootstrapSecretName "" }}
      {{- $hasBootstrapInline := and $bootstrap.username $bootstrap.password }}
      {{- if or $hasBootstrapSecret $hasBootstrapInline $ldapTlsEnabled }}
      initContainers:
        {{- if or $hasBootstrapSecret $hasBootstrapInline }}
        - name: bootstrap-admin-password
          image: "{{ .Values.keycloak.image.registry }}/{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          command:
            - /bin/bash
            - -ec
            - |
              set -euo pipefail
              if [[ -z "${KC_BOOTSTRAP_ADMIN_PASSWORD:-}" ]]; then
                echo "Bootstrap admin password not provided; skipping flag reset."
                exit 0
              fi
              echo "Ensuring bootstrap admin password is marked permanent."
              /opt/keycloak/bin/kc.sh set-password \
                --realm "${KC_BOOTSTRAP_ADMIN_REALM:-master}" \
                --user "${KC_BOOTSTRAP_ADMIN_USERNAME:-admin}" \
                --new-password "${KC_BOOTSTRAP_ADMIN_PASSWORD}" \
                --temporary=false
              echo "Bootstrap admin password persisted."
          env:
            - name: KC_BOOTSTRAP_ADMIN_REALM
              value: {{ default "master" .Values.keycloak.realmImport.realm | default "master" | quote }}
          {{- if $hasBootstrapSecret }}
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $bootstrapSecretName | quote }}
                  key: {{ default "username" $bootstrap.usernameKey | quote }}
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $bootstrapSecretName | quote }}
                  key: {{ default "password" $bootstrap.passwordKey | quote }}
          {{- else }}
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              value: {{ $bootstrap.username | quote }}
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              value: {{ $bootstrap.password | quote }}
          {{- end }}
        {{- end }}
        {{- if $ldapTlsEnabled }}
        - name: ldap-truststore-setup
          image: "{{ .Values.keycloak.image.registry }}/{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          env:
            - name: TRUSTSTORE_PASSWORD
              value: {{ $ldapTlsPassword | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              set -euo pipefail
              rm -f /truststore/{{ $ldapTlsFile }}
              keytool -importcert -noprompt \
                -storetype PKCS12 \
                -keystore /truststore/{{ $ldapTlsFile }} \
                -storepass "${TRUSTSTORE_PASSWORD}" \
                -alias ldap-ca \
                -file /ldap-ca/{{ $ldapTlsCaKey }}
          volumeMounts:
            - name: ldap-truststore
              mountPath: /truststore
            - name: ldap-ca-bundle
              mountPath: /ldap-ca
        {{- end }}
      {{- end }}
      containers:
        - name: keycloak
          image: "{{ .Values.keycloak.image.registry }}/{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          args:
            {{- range $arg := .Values.keycloak.args }}
            - {{ $arg }}
            {{- end }}
            {{- if and .Values.keycloak.realmImport.enabled .Values.keycloak.realmImport.files }}
            - --import-realm
            {{- end }}
          env:
            {{- range $env := .Values.keycloak.env }}
            - name: {{ $env.name }}
              value: {{ $env.value | quote }}
            {{- end }}
            {{- if $bootstrapSecretName }}
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $bootstrapSecretName | quote }}
                  key: {{ default "username" $bootstrap.usernameKey | quote }}
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $bootstrapSecretName | quote }}
                  key: {{ default "password" $bootstrap.passwordKey | quote }}
            {{- else if and $bootstrap.username $bootstrap.password }}
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              value: {{ $bootstrap.username | quote }}
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              value: {{ $bootstrap.password | quote }}
            {{- end }}
            - name: KC_DB
              value: postgres
            - name: KC_DB_USERNAME
              value: {{ .Values.postgresql.auth.username | quote }}
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $pgSecretName | quote }}
                  key: {{ default "password" .Values.postgresql.auth.secretKeys.userPasswordKey | quote }}
            - name: KC_DB_URL_HOST
              value: {{ printf "%s-postgresql" .Release.Name | quote }}
            - name: KC_DB_URL_PORT
              value: "5432"
            - name: KC_DB_URL_DATABASE
              value: {{ .Values.postgresql.auth.database | quote }}
            {{- if $routeHost }}
            - name: KC_HOSTNAME
              value: {{ $routeHost | quote }}
            - name: KC_HOSTNAME_URL
              value: {{ printf "https://%s" $routeHost | quote }}
            {{- end }}
            {{- if $ldapTlsEnabled }}
            - name: KC_SPI_TRUSTSTORE_FILE_FILE
              value: {{ printf "/opt/keycloak/conf/truststore/%s" $ldapTlsFile | quote }}
            - name: KC_SPI_TRUSTSTORE_FILE_PASSWORD
              value: {{ $ldapTlsPassword | quote }}
            - name: KC_SPI_TRUSTSTORE_FILE_HOSTNAME_VERIFICATION_POLICY
              value: {{ $ldapTlsHostnamePolicy | quote }}
            - name: KC_SPI_TRUSTSTORE_FILE_TYPE
              value: PKCS12
            {{- end }}
            {{- if and .Values.keycloak.realmImport.enabled .Values.keycloak.realmImport.overrideExisting }}
            - name: KC_IMPORT_STRATEGY
              value: OVERWRITE_EXISTING
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: management
              containerPort: 9000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /health/live
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          volumeMounts:
            - name: curl-shim
              mountPath: /usr/local/bin/curl
              subPath: curl
              readOnly: true
            {{- if and .Values.keycloak.realmImport.enabled .Values.keycloak.realmImport.files }}
            - name: realm-import
              mountPath: /opt/keycloak/data/import
              readOnly: true
            {{- end }}
            {{- if $ldapTlsEnabled }}
            - name: ldap-truststore
              mountPath: /opt/keycloak/conf/truststore
            {{- end }}
      volumes:
        - name: curl-shim
          configMap:
            name: {{ include "keycloak-stack.fullname" . }}-curl-shim
            defaultMode: 0555
        {{- if and .Values.keycloak.realmImport.enabled .Values.keycloak.realmImport.files }}
        - name: realm-import
          configMap:
            name: {{ include "keycloak-stack.fullname" . }}-realm-import
        {{- end }}
        {{- if $ldapTlsEnabled }}
        - name: ldap-truststore
          emptyDir: {}
        - name: ldap-ca-bundle
          secret:
            secretName: {{ $ldapTlsSecret | quote }}
            items:
              - key: {{ $ldapTlsCaKey | quote }}
                path: {{ $ldapTlsCaKey | quote }}
            defaultMode: 0444
        {{- end }}
