{{- $ldap := .Values.keycloak.ldap -}}
{{- if $ldap.autoConfigure -}}
{{- $realm := $ldap.realm | default "" -}}
{{- if not $realm -}}
  {{- fail "keycloak.ldap.realm must be set when autoConfigure=true" -}}
{{- end -}}
{{- $kcAdminSecret := (include "keycloak-stack.bootstrapAdminSecretName" .) | trim -}}
{{- if not $kcAdminSecret -}}
  {{- fail "Unable to resolve bootstrap admin secret for Keycloak LDAP auto-configuration" -}}
{{- end -}}
{{- $connectionUrl := $ldap.connectionUrl -}}
{{- $openldap := .Values.openldap -}}
{{- $openldapTlsEnabled := and $openldap.enabled $openldap.tls.enabled -}}
{{- if not $connectionUrl -}}
  {{- if $openldap.enabled -}}
    {{- $scheme := "ldap" -}}
    {{- $port := int $openldap.service.port -}}
    {{- if and $openldap.tls.enabled $openldap.service.tlsPort -}}
      {{- $scheme = "ldaps" -}}
      {{- $port = int $openldap.service.tlsPort -}}
    {{- end -}}
    {{- $connectionUrl = printf "%s://%s-openldap:%d" $scheme (include "keycloak-stack.fullname" .) $port -}}
  {{- else -}}
    {{- fail "keycloak.ldap.connectionUrl must be set when autoConfigure=true" -}}
  {{- end -}}
{{- end -}}
{{- $baseDN := $ldap.baseDn -}}
{{- if not $baseDN -}}
  {{- $baseDN = $openldap.config.baseDN -}}
  {{- if not $baseDN -}}
    {{- $baseDN = include "keycloak-stack.ldapBaseDN" $openldap.config.domain -}}
  {{- end -}}
{{- end -}}
{{- $bindDn := $ldap.bindDn -}}
{{- if not $bindDn -}}
  {{- if $openldap.enabled -}}
    {{- if not $baseDN -}}
      {{- fail "Unable to determine LDAP base DN; set keycloak.ldap.bindDn explicitly" -}}
    {{- end -}}
    {{- $bindDn = printf "cn=admin,%s" $baseDN -}}
  {{- else -}}
    {{- fail "keycloak.ldap.bindDn must be set when autoConfigure=true" -}}
  {{- end -}}
{{- end -}}
{{- $usersDn := $ldap.usersDn -}}
{{- if not $usersDn -}}
  {{- if not $baseDN -}}
    {{- fail "keycloak.ldap.usersDn must be set when autoConfigure=true" -}}
  {{- end -}}
  {{- $usersDn = printf "ou=users,%s" $baseDN -}}
{{- end -}}
{{- $groupsDn := $ldap.groupsDn -}}
{{- if not $groupsDn -}}
  {{- if not $baseDN -}}
    {{- fail "keycloak.ldap.groupsDn must be set when autoConfigure=true" -}}
  {{- end -}}
  {{- $groupsDn = printf "ou=groups,%s" $baseDN -}}
{{- end -}}
{{- $bindSecretName := $ldap.bindCredentialSecret -}}
{{- if not $bindSecretName -}}
  {{- if $openldap.enabled -}}
    {{- $bindSecretName = (include "keycloak-stack.openldapAdminSecretName" .) | trim -}}
  {{- end -}}
{{- end -}}
{{- if not $bindSecretName -}}
  {{- fail "keycloak.ldap.bindCredentialSecret must be set or OpenLDAP admin secret must be available" -}}
{{- end -}}
{{- $bindSecretKey := default "password" $ldap.bindCredentialKey -}}
{{- $importUsers := printf "%t" $ldap.importUsers -}}
{{- $editMode := $ldap.editMode | default "READ_ONLY" -}}
{{- $syncPeriod := printf "%v" $ldap.syncPeriod -}}
{{- $fullSync := printf "%v" $ldap.fullSyncPeriod -}}
{{- $changedSync := printf "%v" $ldap.changedSyncPeriod -}}
{{- $cachePolicy := $ldap.cachePolicy | default "DEFAULT" -}}
{{- $searchScope := $ldap.searchScope | default "SUBTREE" -}}
{{- $uuidAttr := $ldap.uuidLDAPAttribute | default "entryUUID" -}}
{{- $usernameAttr := $ldap.usernameLDAPAttribute | default "uid" -}}
{{- $rdnAttr := $ldap.rdnLDAPAttribute | default "uid" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "keycloak-stack.fullname" . }}-ldap-config
  labels:
    {{- include "keycloak-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: keycloak-config
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        {{- include "keycloak-stack.labels" . | nindent 8 }}
        app.kubernetes.io/component: keycloak-config
    spec:
      restartPolicy: OnFailure
      containers:
        - name: configure-ldap
          image: "{{ .Values.keycloak.image.registry }}/{{ .Values.keycloak.image.repository }}:{{ .Values.keycloak.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.image.pullPolicy }}
          env:
            - name: KC_HOST
              value: {{ printf "http://%s:8080" (include "keycloak-stack.fullname" .) | quote }}
            - name: KC_REALM
              value: {{ $realm | quote }}
            - name: KC_PROVIDER_NAME
              value: {{ $ldap.providerName | quote }}
            - name: KC_CONNECTION_URL
              value: {{ $connectionUrl | quote }}
            - name: KC_BIND_DN
              value: {{ $bindDn | quote }}
            - name: KC_USERS_DN
              value: {{ $usersDn | quote }}
            - name: KC_GROUPS_DN
              value: {{ $groupsDn | quote }}
            - name: KC_IMPORT_USERS
              value: {{ $importUsers | quote }}
            - name: KC_EDIT_MODE
              value: {{ $editMode | quote }}
            - name: KC_SYNC_PERIOD
              value: {{ $syncPeriod | quote }}
            - name: KC_FULL_SYNC
              value: {{ $fullSync | quote }}
            - name: KC_CHANGED_SYNC
              value: {{ $changedSync | quote }}
            - name: KC_CACHE_POLICY
              value: {{ $cachePolicy | quote }}
            - name: KC_SEARCH_SCOPE
              value: {{ $searchScope | quote }}
            - name: KC_UUID_ATTR
              value: {{ $uuidAttr | quote }}
            - name: KC_USERNAME_ATTR
              value: {{ $usernameAttr | quote }}
            - name: KC_RDN_ATTR
              value: {{ $rdnAttr | quote }}
            - name: KC_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $kcAdminSecret | quote }}
                  key: {{ default "username" .Values.keycloak.bootstrapAdmin.usernameKey | quote }}
            - name: KC_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $kcAdminSecret | quote }}
                  key: {{ default "password" .Values.keycloak.bootstrapAdmin.passwordKey | quote }}
            - name: HOME
              value: /tmp/kcadm
            - name: KC_BIND_CREDENTIAL
              valueFrom:
                secretKeyRef:
                  name: {{ $bindSecretName | quote }}
                  key: {{ $bindSecretKey | quote }}
          command:
            - /bin/bash
            - -ec
            - |
              set -euo pipefail
              mkdir -p "${HOME}/.keycloak"
              host_port="${KC_HOST#*://}"
              if [[ "$host_port" == "$KC_HOST" ]]; then
                host_port="$KC_HOST"
              fi
              host_port="${host_port%%/*}"
              host="${host_port%%:*}"
              port="${host_port##*:}"
              if [[ "$port" == "$host_port" ]]; then
                port="8080"
              fi
              echo "Waiting for Keycloak service ${host}:${port}..."
              until (echo >"/dev/tcp/${host}/${port}") >/dev/null 2>&1; do
                sleep 5
              done
              echo "Service port is open; waiting for Keycloak admin API..."
              until /opt/keycloak/bin/kcadm.sh config credentials --server "$KC_HOST" --realm master --user "$KC_ADMIN_USER" --password "$KC_ADMIN_PASSWORD"; do
                echo "Waiting for Keycloak admin API..."
                sleep 5
              done
              echo "Authenticated against Keycloak admin API."
              realm_id=$(/opt/keycloak/bin/kcadm.sh get realms/"$KC_REALM" --fields id --format csv --noquotes 2>/dev/null | tr -d '\r')
              if [[ -z "$realm_id" ]]; then
                echo "Failed to resolve realm ID for realm '$KC_REALM'." >&2
                exit 1
              fi
              existing="$(
                /opt/keycloak/bin/kcadm.sh get components \
                  -r "$KC_REALM" \
                  --query "name=$KC_PROVIDER_NAME" \
                  --fields id \
                  --format csv \
                  --noquotes 2>/dev/null || true
              )"
              existing="$(printf '%s' "$existing" | tr -d '\r')"
              if [[ -n "$existing" ]]; then
                echo "Removing existing LDAP user storage providers (${existing})."
                while read -r comp; do
                  [[ -z "$comp" ]] && continue
                  /opt/keycloak/bin/kcadm.sh delete components/"$comp" -r "$KC_REALM" || true
                done <<<"$existing"
              else
                echo "No existing LDAP user storage providers found."
              fi
              search_scope_normalized="${KC_SEARCH_SCOPE}"
              case "${search_scope_normalized^^}" in
                OBJECT) search_scope_normalized="0" ;;
                ONELEVEL|ONE_LEVEL) search_scope_normalized="1" ;;
                SUBTREE) search_scope_normalized="2" ;;
              esac
              printf '%s\n' \
                '{' \
                "  \"name\": \"${KC_PROVIDER_NAME}\"," \
                '  "providerId": "ldap",' \
                '  "providerType": "org.keycloak.storage.UserStorageProvider",' \
                "  \"parentId\": \"${realm_id}\"," \
                '  "config": {' \
                '    "enabled": ["true"],' \
                '    "priority": ["0"],' \
                "    \"importUsers\": [\"${KC_IMPORT_USERS}\"]," \
                "    \"editMode\": [\"${KC_EDIT_MODE}\"]," \
                "    \"connectionUrl\": [\"${KC_CONNECTION_URL}\"]," \
                "    \"bindDn\": [\"${KC_BIND_DN}\"]," \
                "    \"bindCredential\": [\"${KC_BIND_CREDENTIAL}\"]," \
                "    \"usersDn\": [\"${KC_USERS_DN}\"]," \
                "    \"groupsDn\": [\"${KC_GROUPS_DN}\"]," \
                "    \"syncPeriod\": [\"${KC_SYNC_PERIOD}\"]," \
                "    \"fullSyncPeriod\": [\"${KC_FULL_SYNC}\"]," \
                "    \"changedSyncPeriod\": [\"${KC_CHANGED_SYNC}\"]," \
                "    \"cachePolicy\": [\"${KC_CACHE_POLICY}\"]," \
                '    "useTruststoreSpi": ["{{ $ldap.useTruststoreSpi | default "Always" }}"],' \
                "    \"searchScope\": [\"${search_scope_normalized}\"]," \
                "    \"uuidLDAPAttribute\": [\"${KC_UUID_ATTR}\"]," \
                "    \"usernameLDAPAttribute\": [\"${KC_USERNAME_ATTR}\"]," \
                "    \"rdnLDAPAttribute\": [\"${KC_RDN_ATTR}\"]" \
                '  }' \
                '}' \
              > /tmp/ldap-component.json
              echo "Creating LDAP user storage provider '${KC_PROVIDER_NAME}' for realm '${KC_REALM}'."
              /opt/keycloak/bin/kcadm.sh create components -r "$KC_REALM" -f /tmp/ldap-component.json
{{- end -}}
