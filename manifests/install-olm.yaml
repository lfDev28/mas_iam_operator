# Apply this manifest to install the MAS IAM Operator via OLM.
# Replace every occurrence of `iam` if you want to target a different namespace.
# Development environments: this manifest now bootstraps LDAP TLS material automatically.
# The job below recreates <release>-keycloak-openldap-tls with self-signed certificates.
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloakstack-sample-openldap-tls-generator
  namespace: iam
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: keycloakstack-sample-openldap-tls-generator
  namespace: iam
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: keycloakstack-sample-openldap-tls-generator
  namespace: iam
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: keycloakstack-sample-openldap-tls-generator
subjects:
- kind: ServiceAccount
  name: keycloakstack-sample-openldap-tls-generator
  namespace: iam
---
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloakstack-sample-generate-openldap-tls
  namespace: iam
  labels:
    app.kubernetes.io/component: openldap
    app.kubernetes.io/instance: keycloakstack-sample
    app.kubernetes.io/name: keycloak
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/component: openldap
        app.kubernetes.io/instance: keycloakstack-sample
        app.kubernetes.io/name: keycloak
    spec:
      restartPolicy: OnFailure
      serviceAccountName: keycloakstack-sample-openldap-tls-generator
      containers:
      - name: generate
        image: quay.io/openshift/origin-cli:4.16
        imagePullPolicy: IfNotPresent
        env:
        - name: OPENLDAP_RELEASE
          value: keycloakstack-sample
        - name: LDAP_TRUSTSTORE_PASSWORD
          value: ""
        command:
        - /bin/bash
        - -ec
        - |
          set -euo pipefail

          if ! command -v openssl >/dev/null 2>&1; then
            if command -v microdnf >/dev/null 2>&1; then
              microdnf install -y openssl >/dev/null 2>&1
            else
              echo "openssl is required but not available" >&2
              exit 1
            fi
          fi

          if command -v kubectl >/dev/null 2>&1; then
            kubectl_bin=kubectl
          elif command -v oc >/dev/null 2>&1; then
            kubectl_bin=oc
          else
            echo "kubectl (or oc) is required but not available" >&2
            exit 1
          fi

          namespace="${TARGET_NAMESPACE:-$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)}"
          release="${OPENLDAP_RELEASE:-keycloakstack-sample}"
          truststore_password="${LDAP_TRUSTSTORE_PASSWORD:-}"
          if [[ -z "${truststore_password}" || "${truststore_password}" == "random" ]]; then
            truststore_password="$(head -c 24 /dev/urandom | LC_ALL=C tr -dc 'A-Za-z0-9')"
          fi

          service_host="${release}-keycloak-openldap"
          svc_fqdn="${service_host}.${namespace}.svc"
          svc_cluster_fqdn="${svc_fqdn}.cluster.local"
          secret="${release}-keycloak-openldap-tls"

          workdir="$(mktemp -d)"
          cleanup() {
            rm -rf "${workdir}"
          }
          trap cleanup EXIT
          pushd "${workdir}" >/dev/null

          openssl genrsa -out ca.key 4096
          openssl req -x509 -new -key ca.key -sha256 -days 3650 \
            -out ca.crt \
            -subj "/CN=${release} OpenLDAP Dev CA"

          openssl genrsa -out server.key 4096
          openssl req -new -key server.key -out server.csr \
            -subj "/CN=${svc_fqdn}"

          cat > server.ext <<EOF
          subjectAltName=DNS:${service_host},DNS:${svc_fqdn},DNS:${svc_cluster_fqdn}
          EOF

          openssl x509 -req -in server.csr \
            -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out server.crt -days 730 -sha256 \
            -extfile server.ext

          openssl pkcs12 -export \
            -in ca.crt \
            -nokeys \
            -out ldap-truststore.p12 \
            -passout pass:"${truststore_password}"

          api_server="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"
          token="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
          cacert="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          kubectl_args=(--server "${api_server}" --token "${token}" --certificate-authority "${cacert}" --namespace "${namespace}")

          "${kubectl_bin}" "${kubectl_args[@]}" delete secret "${secret}" --ignore-not-found
          "${kubectl_bin}" "${kubectl_args[@]}" create secret generic "${secret}" \
            --from-file=ca.crt=ca.crt \
            --from-file=tls.crt=server.crt \
            --from-file=tls.key=server.key \
            --from-file=ldap-truststore.p12=ldap-truststore.p12 \
            --from-literal=truststorePassword="${truststore_password}" \
            --dry-run=client -o yaml | "${kubectl_bin}" "${kubectl_args[@]}" apply -f -

          "${kubectl_bin}" "${kubectl_args[@]}" label secret "${secret}" \
            app.kubernetes.io/name="${release}" \
            app.kubernetes.io/component=openldap \
            --overwrite

          "${kubectl_bin}" "${kubectl_args[@]}" annotate secret "${secret}" \
            mas.ibm.com/generated-by=mas-iam-dev \
            mas.ibm.com/description="Self-signed TLS material for the Keycloak/OpenLDAP integration (development use only)." \
            --overwrite

          echo "Generated ${secret} in namespace ${namespace}."
          echo "Truststore password: ${truststore_password}"
---
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: mas-iam-operator
  namespace: openshift-marketplace
spec:
  displayName: MAS IAM Operator
  image: quay.io/lee_forster/mas-iam-operator:catalog-0.0.2
  sourceType: grpc
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: iam-operator-group
  namespace: iam
spec:
  targetNamespaces:
  - iam
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: keycloak-stack-operator
  namespace: iam
spec:
  channel: alpha
  installPlanApproval: Automatic
  name: keycloak-stack-operator
  source: mas-iam-operator
  sourceNamespace: openshift-marketplace
---
# Optional: example KeycloakStack custom resource once the operator CSV is ready.
# Ensure the required LDAP TLS secret exists (see documentation) before applying.
apiVersion: iam.iam.mas.ibm.com/v1alpha1
kind: KeycloakStack
metadata:
  name: keycloakstack-sample
  namespace: iam
spec:
  keycloak:
    ldap:
      autoConfigure: true
      # Populate with the name of the secret containing LDAP bind credentials.
      bindCredentialSecret: ""
      # Provide the ldaps:// endpoint for your LDAP server.
      connectionUrl: "ldaps://keycloakstack-sample-keycloak-openldap.iam.svc.cluster.local:636"
      tls:
        enabled: true
        caSecret: keycloakstack-sample-keycloak-openldap-tls
        truststorePasswordSecret: keycloakstack-sample-keycloak-openldap-tls
        truststorePasswordKey: truststorePassword
  openldap:
    enabled: true
  postgresql:
    auth:
      password: keycloak123
      postgresPassword: admin123
    global:
      postgresql:
        auth:
          password: keycloak123
          postgresPassword: admin123
    primary:
      persistence:
        storageClass: rook-ceph-block
